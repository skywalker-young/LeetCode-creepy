##背包问题
##
#
def knapSack(W, wt, val, n):
    K = [[0 for x in range(W + 1)] for x in range(n + 1)]

    # Build table K[][] in bottom up manner
    for i in range(n + 1):
        for w in range(W + 1):
            if i == 0 or w == 0:
                K[i][w] = 0
            elif wt[i - 1] <= w:
                a=w-wt[i-1]
                print('剩余空间',a)
                b= K[i - 1][w]
                print(' 已经放置的价值？？',b)
                K[i][w] = max(val[i - 1] + K[i - 1][w - wt[i - 1]], K[i - 1][w])
            else:
                K[i][w] = K[i - 1][w]

    return K[n][W]

val = [60, 100, 120,130]
wt = [1, 2, 3,5]
W = 6
n = len(val)
print(knapSack(W, wt, val, n))

##
##coin change
#
# Dynamic Programming Python implementation of Coin  
# Change problem 
def count(S, m, n):
    # We need n+1 rows as the table is constructed
    # in bottom up manner using the base case 0 value
    # case (n = 0)
    table = [[0 for x in range(m)] for x in range(n + 1)]
    print(table)
    # Fill the entries for 0 value case (n = 0)
    for i in range(m):
        table[0][i] = 1

    # Fill rest of the table entries in bottom up manner
    for i in range(1, n + 1):
        for j in range(m):
            a=i-S[j]
            print('a',a)
            # Count of solutions including S[j]
            tmp=table[i - S[j]][j]
            x = table[i - S[j]][j] if i - S[j] >= 0 else 0

            # Count of solutions excluding S[j]
            y = table[i][j - 1] if j >= 1 else 0

            # total count
            table[i][j] = x + y

    return table[n][m - 1]


# Driver program to test above function
arr = [1, 2, 5]
m = len(arr)
n = 11
print(count(arr, m, n))
